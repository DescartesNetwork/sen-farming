{"version":3,"file":"static/js/999.d4dc76d1.chunk.js","mappings":"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","sources":["../node_modules/@senswap/react-lazyload/lib/index.js","../node_modules/@senswap/react-lazyload/lib/utils/debounce.js","../node_modules/@senswap/react-lazyload/lib/utils/event.js","../node_modules/@senswap/react-lazyload/lib/utils/scrollParent.js","../node_modules/@senswap/react-lazyload/lib/utils/throttle.js","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/copy-to-clipboard/index.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-copy-to-clipboard/lib/Component.js","../node_modules/react-copy-to-clipboard/lib/index.js","../node_modules/react-fast-compare/index.js","../node_modules/toggle-selection/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forceVisible = exports.forceCheck = exports.lazyload = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _event = require('./utils/event');\n\nvar _scrollParent = require('./utils/scrollParent');\n\nvar _scrollParent2 = _interopRequireDefault(_scrollParent);\n\nvar _debounce = require('./utils/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _throttle = require('./utils/throttle');\n\nvar _throttle2 = _interopRequireDefault(_throttle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * react-lazyload\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar defaultBoundingClientRect = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  width: 0,\n  height: 0\n};\nvar LISTEN_FLAG = 'data-lazyload-listened';\nvar listeners = [];\nvar pending = [];\n\n// try to handle passive events\nvar passiveEventSupported = false;\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      passiveEventSupported = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {}\n// if they are supported, setup the optional params\n// IMPORTANT: FALSE doubles as the default CAPTURE value!\nvar passiveEvent = passiveEventSupported ? { capture: false, passive: true } : false;\n\n/**\n * Check if `component` is visible in overflow container `parent`\n * @param  {node} component React component\n * @param  {node} parent    component's scroll parent\n * @return {bool}\n */\nvar checkOverflowVisible = function checkOverflowVisible(component, parent) {\n  var node = component.ref;\n\n  var parentTop = void 0;\n  var parentLeft = void 0;\n  var parentHeight = void 0;\n  var parentWidth = void 0;\n\n  try {\n    ;\n    var _parent$getBoundingCl = parent.getBoundingClientRect();\n\n    parentTop = _parent$getBoundingCl.top;\n    parentLeft = _parent$getBoundingCl.left;\n    parentHeight = _parent$getBoundingCl.height;\n    parentWidth = _parent$getBoundingCl.width;\n  } catch (e) {\n    ;parentTop = defaultBoundingClientRect.top;\n    parentLeft = defaultBoundingClientRect.left;\n    parentHeight = defaultBoundingClientRect.height;\n    parentWidth = defaultBoundingClientRect.width;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n  var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;\n\n  // calculate top and height of the intersection of the element's scrollParent and viewport\n  var intersectionTop = Math.max(parentTop, 0); // intersection's top relative to viewport\n  var intersectionLeft = Math.max(parentLeft, 0); // intersection's left relative to viewport\n  var intersectionHeight = Math.min(windowInnerHeight, parentTop + parentHeight) - intersectionTop; // height\n  var intersectionWidth = Math.min(windowInnerWidth, parentLeft + parentWidth) - intersectionLeft; // width\n\n  // check whether the element is visible in the intersection\n  var top = void 0;\n  var left = void 0;\n  var height = void 0;\n  var width = void 0;\n\n  try {\n    ;\n    var _node$getBoundingClie = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie.top;\n    left = _node$getBoundingClie.left;\n    height = _node$getBoundingClie.height;\n    width = _node$getBoundingClie.width;\n  } catch (e) {\n    ;top = defaultBoundingClientRect.top;\n    left = defaultBoundingClientRect.left;\n    height = defaultBoundingClientRect.height;\n    width = defaultBoundingClientRect.width;\n  }\n\n  var offsetTop = top - intersectionTop; // element's top relative to intersection\n  var offsetLeft = left - intersectionLeft; // element's left relative to intersection\n\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return offsetTop - offsets[0] <= intersectionHeight && offsetTop + height + offsets[1] >= 0 && offsetLeft - offsets[0] <= intersectionWidth && offsetLeft + width + offsets[1] >= 0;\n};\n\n/**\n * Check if `component` is visible in document\n * @param  {node} component React component\n * @return {bool}\n */\nvar checkNormalVisible = function checkNormalVisible(component) {\n  var node = component.ref;\n\n  // If this element is hidden by css rules somehow, it's definitely invisible\n  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;\n\n  var top = void 0;\n  var elementHeight = void 0;\n\n  try {\n    ;\n    var _node$getBoundingClie2 = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie2.top;\n    elementHeight = _node$getBoundingClie2.height;\n  } catch (e) {\n    ;top = defaultBoundingClientRect.top;\n    elementHeight = defaultBoundingClientRect.height;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return top - offsets[0] <= windowInnerHeight && top + elementHeight + offsets[1] >= 0;\n};\n\n/**\n * Detect if element is visible in viewport, if so, set `visible` state to true.\n * If `once` prop is provided true, remove component as listener after checkVisible\n *\n * @param  {React} component   React component that respond to scroll and resize\n */\nvar checkVisible = function checkVisible(component) {\n  var node = component.ref;\n  if (!(node instanceof HTMLElement)) {\n    return;\n  }\n\n  var parent = (0, _scrollParent2.default)(node);\n  var isOverflow = component.props.overflow && parent !== node.ownerDocument && parent !== document && parent !== document.documentElement;\n  var visible = isOverflow ? checkOverflowVisible(component, parent) : checkNormalVisible(component);\n  if (visible) {\n    // Avoid extra render if previously is visible\n    if (!component.visible) {\n      if (component.props.once) {\n        pending.push(component);\n      }\n\n      component.visible = true;\n      component.forceUpdate();\n    }\n  } else if (!(component.props.once && component.visible)) {\n    component.visible = false;\n    if (component.props.unmountIfInvisible) {\n      component.forceUpdate();\n    }\n  }\n};\n\nvar purgePending = function purgePending() {\n  pending.forEach(function (component) {\n    var index = listeners.indexOf(component);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  });\n\n  pending = [];\n};\n\nvar lazyLoadHandler = function lazyLoadHandler() {\n  for (var i = 0; i < listeners.length; ++i) {\n    var listener = listeners[i];\n    checkVisible(listener);\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n\n/**\n * Forces the component to display regardless of whether the element is visible in the viewport.\n */\nvar forceVisible = function forceVisible() {\n  for (var i = 0; i < listeners.length; ++i) {\n    var listener = listeners[i];\n    listener.visible = true;\n    listener.forceUpdate();\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n\n// Depending on component's props\nvar delayType = void 0;\nvar finalLazyLoadHandler = null;\n\nvar isString = function isString(string) {\n  return typeof string === 'string';\n};\n\nvar LazyLoad = function (_Component) {\n  _inherits(LazyLoad, _Component);\n\n  function LazyLoad(props) {\n    _classCallCheck(this, LazyLoad);\n\n    var _this = _possibleConstructorReturn(this, (LazyLoad.__proto__ || Object.getPrototypeOf(LazyLoad)).call(this, props));\n\n    _this.visible = false;\n    _this.setRef = _this.setRef.bind(_this);\n    return _this;\n  }\n\n  _createClass(LazyLoad, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // It's unlikely to change delay type on the fly, this is mainly\n      // designed for tests\n      var scrollport = window;\n      var scrollContainer = this.props.scrollContainer;\n\n      if (scrollContainer) {\n        if (isString(scrollContainer)) {\n          scrollport = scrollport.document.querySelector(scrollContainer);\n        }\n      }\n      var needResetFinalLazyLoadHandler = this.props.debounce !== undefined && delayType === 'throttle' || delayType === 'debounce' && this.props.debounce === undefined;\n\n      if (needResetFinalLazyLoadHandler) {\n        (0, _event.off)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);\n        (0, _event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        finalLazyLoadHandler = null;\n      }\n\n      if (!finalLazyLoadHandler) {\n        if (this.props.debounce !== undefined) {\n          finalLazyLoadHandler = (0, _debounce2.default)(lazyLoadHandler, typeof this.props.debounce === 'number' ? this.props.debounce : 300);\n          delayType = 'debounce';\n        } else if (this.props.throttle !== undefined) {\n          finalLazyLoadHandler = (0, _throttle2.default)(lazyLoadHandler, typeof this.props.throttle === 'number' ? this.props.throttle : 300);\n          delayType = 'throttle';\n        } else {\n          finalLazyLoadHandler = lazyLoadHandler;\n        }\n      }\n\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(this.ref);\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = 1 + +parent.getAttribute(LISTEN_FLAG);\n          if (listenerCount === 1) {\n            parent.addEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n          }\n          parent.setAttribute(LISTEN_FLAG, listenerCount);\n        }\n      } else if (listeners.length === 0 || needResetFinalLazyLoadHandler) {\n        var _props = this.props,\n            scroll = _props.scroll,\n            resize = _props.resize;\n\n\n        if (scroll) {\n          (0, _event.on)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);\n        }\n\n        if (resize) {\n          (0, _event.on)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        }\n      }\n\n      listeners.push(this);\n      checkVisible(this);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return this.visible;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(this.ref);\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = +parent.getAttribute(LISTEN_FLAG) - 1;\n          if (listenerCount === 0) {\n            parent.removeEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n            parent.removeAttribute(LISTEN_FLAG);\n          } else {\n            parent.setAttribute(LISTEN_FLAG, listenerCount);\n          }\n        }\n      }\n\n      var index = listeners.indexOf(this);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n\n      if (listeners.length === 0 && typeof window !== 'undefined') {\n        (0, _event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        (0, _event.off)(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      }\n    }\n  }, {\n    key: 'setRef',\n    value: function setRef(element) {\n      if (element) {\n        this.ref = element;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          height = _props2.height,\n          children = _props2.children,\n          placeholder = _props2.placeholder,\n          className = _props2.className,\n          classNamePrefix = _props2.classNamePrefix,\n          style = _props2.style;\n\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: classNamePrefix + '-wrapper ' + className,\n          ref: this.setRef,\n          style: style\n        },\n        this.visible ? children : placeholder ? placeholder : _react2.default.createElement('div', {\n          style: { height: height },\n          className: classNamePrefix + '-placeholder'\n        })\n      );\n    }\n  }]);\n\n  return LazyLoad;\n}(_react.Component);\n\nLazyLoad.propTypes = {\n  className: _propTypes2.default.string,\n  classNamePrefix: _propTypes2.default.string,\n  once: _propTypes2.default.bool,\n  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),\n  overflow: _propTypes2.default.bool,\n  resize: _propTypes2.default.bool,\n  scroll: _propTypes2.default.bool,\n  children: _propTypes2.default.node,\n  throttle: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),\n  debounce: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),\n  placeholder: _propTypes2.default.node,\n  scrollContainer: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  unmountIfInvisible: _propTypes2.default.bool,\n  style: _propTypes2.default.object\n};\n\nLazyLoad.defaultProps = {\n  className: '',\n  classNamePrefix: 'lazyload',\n  once: false,\n  offset: 0,\n  overflow: false,\n  resize: false,\n  scroll: true,\n  unmountIfInvisible: false\n};\n\nvar getDisplayName = function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n};\n\nvar decorator = function decorator() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function lazyload(WrappedComponent) {\n    return function (_Component2) {\n      _inherits(LazyLoadDecorated, _Component2);\n\n      function LazyLoadDecorated() {\n        _classCallCheck(this, LazyLoadDecorated);\n\n        var _this2 = _possibleConstructorReturn(this, (LazyLoadDecorated.__proto__ || Object.getPrototypeOf(LazyLoadDecorated)).call(this));\n\n        _this2.displayName = 'LazyLoad' + getDisplayName(WrappedComponent);\n        return _this2;\n      }\n\n      _createClass(LazyLoadDecorated, [{\n        key: 'render',\n        value: function render() {\n          return _react2.default.createElement(\n            LazyLoad,\n            options,\n            _react2.default.createElement(WrappedComponent, this.props)\n          );\n        }\n      }]);\n\n      return LazyLoadDecorated;\n    }(_react.Component);\n  };\n};\n\nexports.lazyload = decorator;\nexports.default = LazyLoad;\nexports.forceCheck = lazyLoadHandler;\nexports.forceVisible = forceVisible;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = debounce;\nfunction debounce(func, wait, immediate) {\n  var timeout = void 0;\n  var args = void 0;\n  var context = void 0;\n  var timestamp = void 0;\n  var result = void 0;\n\n  var later = function later() {\n    var last = +new Date() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) {\n          context = null;\n          args = null;\n        }\n      }\n    }\n  };\n\n  return function debounced() {\n    context = this;\n    args = arguments;\n    timestamp = +new Date();\n\n    var callNow = immediate && !timeout;\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = null;\n      args = null;\n    }\n\n    return result;\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.on = on;\nexports.off = off;\nfunction on(el, eventName, callback, opts) {\n  opts = opts || false;\n  if (el.addEventListener) {\n    el.addEventListener(eventName, callback, opts);\n  } else if (el.attachEvent) {\n    el.attachEvent(\"on\" + eventName, function (e) {\n      callback.call(el, e || window.event);\n    });\n  }\n}\n\nfunction off(el, eventName, callback, opts) {\n  opts = opts || false;\n  if (el.removeEventListener) {\n    el.removeEventListener(eventName, callback, opts);\n  } else if (el.detachEvent) {\n    el.detachEvent(\"on\" + eventName, callback);\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * @fileOverview Find scroll parent\n */\n\nexports.default = function (node) {\n  if (!(node instanceof HTMLElement)) {\n    return document.documentElement;\n  }\n\n  var excludeStaticParent = node.style.position === 'absolute';\n  var overflowRegex = /(scroll|auto|overlay)/;\n  var parent = node;\n\n  while (parent) {\n    if (!parent.parentNode) {\n      return node.ownerDocument || document.documentElement;\n    }\n\n    var style = window.getComputedStyle(parent);\n    var position = style.position;\n    var overflow = style.overflow;\n    var overflowX = style['overflow-x'];\n    var overflowY = style['overflow-y'];\n\n    if (position === 'static' && excludeStaticParent) {\n      parent = parent.parentNode;\n      continue;\n    }\n\n    if (overflowRegex.test(overflow) && overflowRegex.test(overflowX) && overflowRegex.test(overflowY)) {\n      return parent;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return node.ownerDocument || node.documentElement || document.documentElement;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = throttle;\n/*eslint-disable */\nfunction throttle(fn, threshhold, scope) {\n  threshhold || (threshhold = 250);\n  var last, deferTimer;\n  return function () {\n    var context = scope || this;\n\n    var now = +new Date(),\n        args = arguments;\n    if (last && now < last + threshhold) {\n      // hold on to it\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CopyToClipboard = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CopyToClipboard =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CopyToClipboard, _React$PureComponent);\n\n  function CopyToClipboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CopyToClipboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CopyToClipboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (event) {\n      var _this$props = _this.props,\n          text = _this$props.text,\n          onCopy = _this$props.onCopy,\n          children = _this$props.children,\n          options = _this$props.options;\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      var result = (0, _copyToClipboard[\"default\"])(text, options);\n\n      if (onCopy) {\n        onCopy(text, result);\n      } // Bypass onClick if it was present\n\n\n      if (elem && elem.props && typeof elem.props.onClick === 'function') {\n        elem.props.onClick(event);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CopyToClipboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _text = _this$props2.text,\n          _onCopy = _this$props2.onCopy,\n          _options = _this$props2.options,\n          children = _this$props2.children,\n          props = _objectWithoutProperties(_this$props2, [\"text\", \"onCopy\", \"options\", \"children\"]);\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      return _react[\"default\"].cloneElement(elem, _objectSpread({}, props, {\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return CopyToClipboard;\n}(_react[\"default\"].PureComponent);\n\nexports.CopyToClipboard = CopyToClipboard;\n\n_defineProperty(CopyToClipboard, \"defaultProps\", {\n  onCopy: undefined,\n  options: undefined\n});","\"use strict\";\n\nvar _require = require('./Component'),\n    CopyToClipboard = _require.CopyToClipboard;\n\nCopyToClipboard.CopyToClipboard = CopyToClipboard;\nmodule.exports = CopyToClipboard;","/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n"],"names":["exports","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_react","require","_react2","_interopRequireDefault","_propTypes2","_event","_scrollParent2","_debounce2","_throttle2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","defaultBoundingClientRect","LISTEN_FLAG","listeners","pending","passiveEventSupported","opts","get","window","addEventListener","e","passiveEvent","capture","passive","checkVisible","component","node","ref","HTMLElement","parent","visible","overflow","ownerDocument","document","documentElement","parentTop","parentLeft","parentHeight","parentWidth","_parent$getBoundingCl","getBoundingClientRect","top","left","height","width","windowInnerHeight","innerHeight","clientHeight","windowInnerWidth","innerWidth","clientWidth","intersectionTop","Math","max","intersectionLeft","intersectionHeight","min","intersectionWidth","_node$getBoundingClie","offsetTop","offsetLeft","offsets","Array","isArray","offset","checkOverflowVisible","offsetWidth","offsetHeight","getClientRects","elementHeight","_node$getBoundingClie2","checkNormalVisible","once","push","forceUpdate","unmountIfInvisible","purgePending","forEach","index","indexOf","splice","lazyLoadHandler","listener","delayType","finalLazyLoadHandler","LazyLoad","_Component","this","_this","getPrototypeOf","setRef","bind","scrollport","scrollContainer","querySelector","needResetFinalLazyLoadHandler","debounce","off","throttle","getAttribute","listenerCount","setAttribute","_props","scroll","resize","on","removeEventListener","removeAttribute","element","_props2","children","placeholder","className","classNamePrefix","style","createElement","Component","propTypes","string","bool","oneOfType","number","arrayOf","object","defaultProps","getDisplayName","WrappedComponent","displayName","name","func","wait","immediate","timeout","args","context","timestamp","result","later","last","Date","setTimeout","apply","arguments","callNow","el","eventName","callback","attachEvent","event","detachEvent","excludeStaticParent","position","overflowRegex","parentNode","getComputedStyle","overflowX","overflowY","test","fn","threshhold","scope","deferTimer","now","clearTimeout","toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","inherits_browserModule","ctor","superCtor","super_","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","charCodeAt","htonl","w","zero2","word","zero8","enc","slice","res","replace","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","num","utils","BlockHash","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","Hash","inner","outer","_init","hmac","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","_log","logLevel","level","toLowerCase","throwArgumentError","console","log","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","throwError","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","kind","MISSING_NEW","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","isInteger","arrayify","options","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","publicKeyBytes","is_on_curve","address","nonce","seedsWithNonce","createProgramAddress","err","pubkey","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","decode","_encode","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","Transaction","signature","signatures","feePayer","nonceInfo","add","items","item","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","from","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","async","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","global","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","thisArg","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","root","SlotNotificationResult","SlotUpdateResult","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","fetchWithMiddleware","RpcClient","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","configOrCommitment","extra","encoding","filters","decodedSignature","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","getBlock","endSlot","transactionDetails","getTransaction","firstAvailableBlock","getFirstAvailableBlock","block","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_subscribe","mentions","connect","close","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","deselectCurrent","clipboardToIE11Formatting","reselectPrevious","range","selection","mark","success","createRange","getSelection","textContent","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","stopPropagation","format","preventDefault","clipboardData","clearData","setData","onCopy","appendChild","selectNodeContents","addRange","execCommand","copyKey","navigator","userAgent","prompt","removeRange","removeAllRanges","removeChild","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","zeroes","precision","_result$split2","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","isNaN","NaN","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","propFullName","secret","getShim","isRequired","ReactPropTypes","elementType","instanceOf","objectOf","oneOf","shape","exact","checkPropTypes","PropTypes","CopyToClipboard","_copyToClipboard","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_objectWithoutProperties","source","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_defineProperties","_assertThisInitialized","_getPrototypeOf","_setPrototypeOf","_defineProperty","_React$PureComponent","_getPrototypeOf2","_len","_this$props","Children","only","onClick","_this$props2","cloneElement","getOwnPropertyDescriptors","_objectSpread","PureComponent","hasElementType","Element","hasMap","hasSet","hasArrayBuffer","it","flags","$$typeof","rangeCount","activeElement","ranges","getRangeAt","tagName","blur","focus"],"sourceRoot":""}