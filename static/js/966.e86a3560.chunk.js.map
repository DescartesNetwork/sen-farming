{"version":3,"file":"static/js/966.e86a3560.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/is-ipfs/src/index.js","../node_modules/it-filter/index.js","../node_modules/it-map/index.js","../node_modules/it-merge/index.js","../node_modules/it-pipe/index.js","../node_modules/it-take/index.js","../node_modules/libp2p-crypto/src/pbkdf2.js","../node_modules/libp2p-crypto/src/random-bytes.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/datastore-core/esm/src/base.js","../node_modules/datastore-core/esm/src/errors.js","../node_modules/datastore-core/esm/src/keytransform.js","../node_modules/datastore-core/esm/src/memory.js","../node_modules/datastore-core/esm/src/mount.js","../node_modules/datastore-core/esm/src/namespace.js","../node_modules/datastore-core/esm/src/shard.js","../node_modules/datastore-core/esm/src/sharding.js","../node_modules/datastore-core/esm/src/tiered.js","../node_modules/datastore-core/esm/src/utils.js","../node_modules/interface-datastore/esm/src/key.js","../node_modules/ipfs-bitswap/esm/src/message/entry.js","../node_modules/ipfs-core-utils/esm/src/to-cid-and-path.js","../node_modules/multiformats/esm/src/bytes.js"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { CID } = require('multiformats/cid')\nconst { URL } = require('iso-url')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    Digest.decode(base58btc.decode('z' + formatted))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isBase32EncodedMultibase (hash) {\n  try {\n    base32.decode(hash)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n","'use strict'\n\n/**\n * Filters the passed (async) iterable by using the filter function\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {function(T):boolean|Promise<boolean>} fn\n */\nconst filter = async function * (source, fn) {\n  for await (const entry of source) {\n    if (await fn(entry)) {\n      yield entry\n    }\n  }\n}\n\nmodule.exports = filter\n","'use strict'\n\n/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function.\n *\n * @template I,O\n * @param {AsyncIterable<I>|Iterable<I>} source\n * @param {function(I):O|Promise<O>} func\n * @returns {AsyncIterable<O>}\n */\nconst map = async function * (source, func) {\n  for await (const val of source) {\n    yield func(val)\n  }\n}\n\nmodule.exports = map\n","'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (/** @type {any} */ err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n","const rawPipe = (...fns) => {\n  let res\n  while (fns.length) {\n    res = fns.shift()(res)\n  }\n  return res\n}\n\nconst isIterable = obj => obj && (\n  typeof obj[Symbol.asyncIterator] === 'function' ||\n  typeof obj[Symbol.iterator] === 'function' ||\n  typeof obj.next === 'function' // Probably, right?\n)\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source)\n\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source) // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n  return duplex.source\n}\n\nconst pipe = (...fns) => {\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0]\n    fns[0] = () => duplex.source\n  // Iterable at start: wrap in function\n  } else if (isIterable(fns[0])) {\n    const source = fns[0]\n    fns[0] = () => source\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i])\n      }\n    }\n  }\n\n  return rawPipe(...fns)\n}\n\nmodule.exports = pipe\nmodule.exports.pipe = pipe\nmodule.exports.rawPipe = rawPipe\nmodule.exports.isIterable = isIterable\nmodule.exports.isDuplex = isDuplex\n","'use strict'\n\n/**\n * Stop iteration after n items have been received.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} limit\n * @returns {AsyncIterable<T>}\n */\nconst take = async function * (source, limit) {\n  let items = 0\n\n  if (limit < 1) {\n    return\n  }\n\n  for await (const entry of source) {\n    yield entry\n\n    items++\n\n    if (items === limit) {\n      return\n    }\n  }\n}\n\nmodule.exports = take\n","'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\nconst errcode = require('err-code')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize - (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    const types = Object.keys(hashName).join(' / ')\n    throw errcode(new Error(`Hash '${hash}' is unknown or not supported. Must be ${types}`), 'ERR_UNSUPPORTED_HASH_TYPE')\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n","'use strict'\nconst randomBytes = require('iso-random-stream/src/random')\nconst errcode = require('err-code')\n\nmodule.exports = function (length) {\n  if (isNaN(length) || length <= 0) {\n    throw errcode(new Error('random bytes length must be a Number bigger than 0'), 'ERR_INVALID_LENGTH')\n  }\n  return randomBytes(length)\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","import { sortAll } from './utils.js';\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nexport class BaseDatastore {\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  async *putMany(source, options = {}) {\n    for await (const {key, value} of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n  async *getMany(source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n  batch() {\n    let puts = [];\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n      delete(key) {\n        dels.push(key);\n      },\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n  query(q, options) {\n    let it = this._all(q, options);\n    if (q.prefix != null) {\n      it = filter(it, e => e.key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n    if (q.prefix != null) {\n      it = filter(it, key => key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n}","import errCode from 'err-code';\nexport function dbOpenFailedError(err) {\n  err = err || new Error('Cannot open database');\n  return errCode(err, 'ERR_DB_OPEN_FAILED');\n}\nexport function dbDeleteFailedError(err) {\n  err = err || new Error('Delete failed');\n  return errCode(err, 'ERR_DB_DELETE_FAILED');\n}\nexport function dbWriteFailedError(err) {\n  err = err || new Error('Write failed');\n  return errCode(err, 'ERR_DB_WRITE_FAILED');\n}\nexport function notFoundError(err) {\n  err = err || new Error('Not Found');\n  return errCode(err, 'ERR_NOT_FOUND');\n}\nexport function abortedError(err) {\n  err = err || new Error('Aborted');\n  return errCode(err, 'ERR_ABORTED');\n}","import { BaseDatastore } from './base.js';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\nexport class KeyTransformDatastore extends BaseDatastore {\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n  open() {\n    return this.child.open();\n  }\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  async *putMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.convert(key),\n        value\n      }));\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.invert(key),\n        value\n      }));\n    });\n  }\n  async *getMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n  async *deleteMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  query(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return ({key, value}) => filter({\n        key: this.transform.convert(key),\n        value\n      });\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(({key}) => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order({\n          key: this.transform.invert(a.key),\n          value: a.value\n        }, {\n          key: this.transform.invert(b.key),\n          value: b.value\n        });\n      });\n    }\n    return map(this.child.query(query, options), ({key, value}) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  queryKeys(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return key => filter(this.transform.convert(key));\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(key => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n      });\n    }\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport { Key } from 'interface-datastore/key';\nimport * as Errors from './errors.js';\nexport class MemoryDatastore extends BaseDatastore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n  async put(key, val) {\n    this.data[key.toString()] = val;\n  }\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists)\n      throw Errors.notFoundError();\n    return this.data[key.toString()];\n  }\n  async has(key) {\n    return this.data[key.toString()] !== undefined;\n  }\n  async delete(key) {\n    delete this.data[key.toString()];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: new Key(key),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => new Key(key));\n  }\n}","import filter from 'it-filter';\nimport take from 'it-take';\nimport merge from 'it-merge';\nimport { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport { sortAll } from './utils.js';\nexport class MountDatastore extends BaseDatastore {\n  constructor(mounts) {\n    super();\n    this.mounts = mounts.slice();\n  }\n  async open() {\n    await Promise.all(this.mounts.map(m => m.datastore.open()));\n  }\n  _lookup(key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix\n        };\n      }\n    }\n  }\n  put(key, value, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.put(key, value, options);\n  }\n  get(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.get(key, options);\n  }\n  has(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      return Promise.resolve(false);\n    }\n    return match.datastore.has(key, options);\n  }\n  delete(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.delete(key, options);\n  }\n  async close() {\n    await Promise.all(this.mounts.map(m => {\n      return m.datastore.close();\n    }));\n  }\n  batch() {\n    const batchMounts = {};\n    const lookup = key => {\n      const match = this._lookup(key);\n      if (match == null) {\n        throw new Error('No datastore mounted for this key');\n      }\n      const m = match.mountpoint.toString();\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch();\n      }\n      return { batch: batchMounts[m] };\n    };\n    return {\n      put: (key, value) => {\n        const match = lookup(key);\n        match.batch.put(key, value);\n      },\n      delete: key => {\n        const match = lookup(key);\n        match.batch.delete(key);\n      },\n      commit: async options => {\n        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));\n      }\n    };\n  }\n  query(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.query({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n  queryKeys(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.queryKeys({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n}","import { Key } from 'interface-datastore';\nimport { KeyTransformDatastore } from './keytransform.js';\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${ prefix.toString() }) in key: ${ key.toString() }`);\n        }\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    });\n  }\n}","import { Key } from 'interface-datastore/key';\nimport readme from './shard-readme.js';\nexport const PREFIX = '/repo/flatfs/shard/';\nexport const SHARDING_FN = 'SHARDING';\nexport const README_FN = '_README';\nexport class ShardBase {\n  constructor(param) {\n    this.param = param;\n    this.name = 'base';\n    this._padding = '';\n  }\n  fun(s) {\n    return 'implement me';\n  }\n  toString() {\n    return `${ PREFIX }v1/${ this.name }/${ this.param }`;\n  }\n}\nexport class Prefix extends ShardBase {\n  constructor(prefixLen) {\n    super(prefixLen);\n    this._padding = ''.padStart(prefixLen, '_');\n    this.name = 'prefix';\n  }\n  fun(noslash) {\n    return (noslash + this._padding).slice(0, this.param);\n  }\n}\nexport class Suffix extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen, '_');\n    this.name = 'suffix';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    return s.slice(s.length - this.param);\n  }\n}\nexport class NextToLast extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen + 1, '_');\n    this.name = 'next-to-last';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    const offset = s.length - this.param - 1;\n    return s.slice(offset, offset + this.param);\n  }\n}\nexport function parseShardFun(str) {\n  str = str.trim();\n  if (str.length === 0) {\n    throw new Error('empty shard string');\n  }\n  if (!str.startsWith(PREFIX)) {\n    throw new Error(`invalid or no path prefix: ${ str }`);\n  }\n  const parts = str.slice(PREFIX.length).split('/');\n  const version = parts[0];\n  if (version !== 'v1') {\n    throw new Error(`expect 'v1' version, got '${ version }'`);\n  }\n  const name = parts[1];\n  if (!parts[2]) {\n    throw new Error('missing param');\n  }\n  const param = parseInt(parts[2], 10);\n  switch (name) {\n  case 'prefix':\n    return new Prefix(param);\n  case 'suffix':\n    return new Suffix(param);\n  case 'next-to-last':\n    return new NextToLast(param);\n  default:\n    throw new Error(`unkown sharding function: ${ name }`);\n  }\n}\nexport const readShardFun = async (path, store) => {\n  const key = new Key(path).child(new Key(SHARDING_FN));\n  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);\n  const res = await get(key);\n  return parseShardFun(new TextDecoder().decode(res || '').trim());\n};\nexport {\n  default as readme\n} from './shard-readme.js';","import { Key } from 'interface-datastore';\nimport {\n  readShardFun,\n  SHARDING_FN,\n  README_FN,\n  readme\n} from './shard.js';\nimport { BaseDatastore } from './base.js';\nimport { KeyTransformDatastore } from './keytransform.js';\nimport * as Errors from './errors.js';\nconst shardKey = new Key(SHARDING_FN);\nconst shardReadmeKey = new Key(README_FN);\nexport class ShardingDatastore extends BaseDatastore {\n  constructor(store, shard) {\n    super();\n    this.child = new KeyTransformDatastore(store, {\n      convert: this._convertKey.bind(this),\n      invert: this._invertKey.bind(this)\n    });\n    this.shard = shard;\n  }\n  async open() {\n    await this.child.open();\n    this.shard = await ShardingDatastore.create(this.child, this.shard);\n  }\n  _convertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    const parent = new Key(this.shard.fun(s));\n    return parent.child(key);\n  }\n  _invertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    return Key.withNamespaces(key.list().slice(1));\n  }\n  static async createOrOpen(store, shard) {\n    try {\n      await ShardingDatastore.create(store, shard);\n    } catch (err) {\n      if (err && err.message !== 'datastore exists')\n        throw err;\n    }\n    return ShardingDatastore.open(store);\n  }\n  static async open(store) {\n    const shard = await readShardFun('/', store);\n    return new ShardingDatastore(store, shard);\n  }\n  static async create(store, shard) {\n    const hasShard = await store.has(shardKey);\n    if (!hasShard && !shard) {\n      throw Errors.dbOpenFailedError(Error('Shard is required when datastore doesn\\'t have a shard key already.'));\n    }\n    if (!hasShard) {\n      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store);\n      await Promise.all([\n        put(shardKey, new TextEncoder().encode(shard.toString() + '\\n')),\n        put(shardReadmeKey, new TextEncoder().encode(readme))\n      ]);\n      return shard;\n    }\n    const diskShard = await readShardFun('/', store);\n    const a = (diskShard || '').toString();\n    const b = shard.toString();\n    if (a !== b) {\n      throw new Error(`specified fun ${ b } does not match repo shard fun ${ a }`);\n    }\n    return diskShard;\n  }\n  put(key, val, options) {\n    return this.child.put(key, val, options);\n  }\n  get(key, options) {\n    return this.child.get(key, options);\n  }\n  has(key, options) {\n    return this.child.has(key, options);\n  }\n  delete(key, options) {\n    return this.child.delete(key, options);\n  }\n  async *putMany(source, options = {}) {\n    yield* this.child.putMany(source, options);\n  }\n  async *getMany(source, options = {}) {\n    yield* this.child.getMany(source, options);\n  }\n  async *deleteMany(source, options = {}) {\n    yield* this.child.deleteMany(source, options);\n  }\n  batch() {\n    return this.child.batch();\n  }\n  query(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        ({key}) => key.toString() !== shardKey.toString(),\n        ({key}) => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.query(tq, options);\n  }\n  queryKeys(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        key => key.toString() !== shardKey.toString(),\n        key => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.queryKeys(tq, options);\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport debug from 'debug';\nimport pushable from 'it-pushable';\nimport drain from 'it-drain';\nconst log = debug('datastore:core:tiered');\nexport class TieredDatastore extends BaseDatastore {\n  constructor(stores) {\n    super();\n    this.stores = stores.slice();\n  }\n  async open() {\n    try {\n      await Promise.all(this.stores.map(store => store.open()));\n    } catch (err) {\n      throw Errors.dbOpenFailedError();\n    }\n  }\n  async put(key, value) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value)));\n    } catch (err) {\n      throw Errors.dbWriteFailedError();\n    }\n  }\n  async get(key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options);\n        if (res)\n          return res;\n      } catch (err) {\n        log(err);\n      }\n    }\n    throw Errors.notFoundError();\n  }\n  async has(key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async delete(key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)));\n    } catch (err) {\n      throw Errors.dbDeleteFailedError();\n    }\n  }\n  async *putMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.putMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(pair));\n        yield pair;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.deleteMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(key));\n        yield key;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async close() {\n    await Promise.all(this.stores.map(store => store.close()));\n  }\n  batch() {\n    const batches = this.stores.map(store => store.batch());\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value));\n      },\n      delete: key => {\n        batches.forEach(b => b.delete(key));\n      },\n      commit: async options => {\n        for (const batch of batches) {\n          await batch.commit(options);\n        }\n      }\n    };\n  }\n  query(q, options) {\n    return this.stores[this.stores.length - 1].query(q, options);\n  }\n  queryKeys(q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options);\n  }\n}","import all from 'it-all';\nexport const sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\nexport const replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};","import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\nexport class Key {\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  toString(encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  uint8Array() {\n    return this._buf;\n  }\n  get [Symbol.toStringTag]() {\n    return `Key(${ this.toString() })`;\n  }\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      return new Key(other);\n    }\n    if (other.uint8Array) {\n      return new Key(other.uint8Array());\n    }\n    return null;\n  }\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n      const c1 = list1[i];\n      const c2 = list2[i];\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n    return list1.length < list2.length;\n  }\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  namespaces() {\n    return this.list();\n  }\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  path() {\n    let p = this.parent().toString();\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n    p += this.type();\n    return new Key(p);\n  }\n  parent() {\n    const list = this.list();\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n    return new Key(this.toString() + key.toString(), false);\n  }\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return other.toString().startsWith(this.toString());\n  }\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return this.toString().startsWith(other.toString());\n  }\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  concat(...keys) {\n    return Key.withNamespaces([\n      ...this.namespaces(),\n      ...flatten(keys.map(key => key.namespaces()))\n    ]);\n  }\n}\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\nfunction flatten(arr) {\n  return [].concat(...arr);\n}","import { Wantlist } from '../wantlist/index.js';\nimport { base58btc } from 'multiformats/bases/base58';\nconst WantlistEntry = Wantlist.Entry;\nexport class BitswapMessageEntry {\n  constructor(cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType);\n    this.cancel = Boolean(cancel);\n    this.sendDontHave = Boolean(sendDontHave);\n  }\n  get cid() {\n    return this.entry.cid;\n  }\n  set cid(cid) {\n    this.entry.cid = cid;\n  }\n  get priority() {\n    return this.entry.priority;\n  }\n  set priority(val) {\n    this.entry.priority = val;\n  }\n  get wantType() {\n    return this.entry.wantType;\n  }\n  set wantType(val) {\n    this.entry.wantType = val;\n  }\n  get [Symbol.toStringTag]() {\n    const cidStr = this.cid.toString(base58btc);\n    return `BitswapMessageEntry ${ cidStr } <cancel: ${ this.cancel }, priority: ${ this.priority }>`;\n  }\n  equals(other) {\n    return this.cancel === other.cancel && this.sendDontHave === other.sendDontHave && this.wantType === other.wantType && this.entry.equals(other.entry);\n  }\n}","import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nconst IPFS_PREFIX = '/ipfs/';\nexport function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n  let cid = CID.asCID(string);\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    };\n  }\n  string = string.toString();\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n  const parts = string.split('/');\n  let path;\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n  if (parts.length) {\n    path = `/${ parts.join('/') }`;\n  }\n  return {\n    cid,\n    path\n  };\n}","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};"],"names":["toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","undefined","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","address","nonce","seedsWithNonce","createProgramAddress","err","pubkey","default","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","item","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","from","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","async","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","fetchWithMiddleware","RpcClient","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","getBlock","endSlot","transactionDetails","getTransaction","firstAvailableBlock","getFirstAvailableBlock","block","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_subscribe","mentions","connect","close","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","base58btc","require","base32","Digest","Multiaddr","mafmt","CID","uint8ArrayToString","pathGatewayPattern","pathPattern","subdomainGatewayPattern","fqdnWithTld","isCID","Boolean","asCID","isMultiaddr","isIpfs","pattern","protocolMatch","hashMatch","formatted","convertToString","isIpns","ipnsId","hostname","isString","ipfsSubdomain","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","multihash","multiaddr","peerMultiaddr","P2P","matches","cid","base32cid","isBase32EncodedMultibase","ipfsPath","ipnsPath","urlOrPath","cidPath","source","fn","entry","func","pushable","sources","output","rawPipe","fns","isIterable","asyncIterator","isDuplex","sink","duplexPipelineFn","duplex","pipe","forgePbkdf2","forgeUtil","errcode","hashName","password","salt","iterations","keySize","hasher","types","dek","encode64","randomBytes","isNaN","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","precision","_result$split2","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid","BaseDatastore","put","delete","puts","dels","commit","drain","putMany","deleteMany","query","it","_all","orders","sortAll","take","queryKeys","_allKeys","dbOpenFailedError","errCode","dbDeleteFailedError","dbWriteFailedError","notFoundError","abortedError","KeyTransformDatastore","child","transform","convert","invert","getMany","order","MemoryDatastore","Errors","Key","MountDatastore","mounts","datastore","_lookup","mount","isAncestorOf","mountpoint","batchMounts","lookup","qs","merge","NamespaceDatastore","PREFIX","SHARDING_FN","README_FN","ShardBase","param","_padding","fun","Prefix","prefixLen","padStart","noslash","Suffix","suffixLen","NextToLast","parseShardFun","readShardFun","store","getRaw","TextDecoder","shardKey","shardReadmeKey","ShardingDatastore","shard","_convertKey","_invertKey","list","hasShard","putRaw","readme","diskShard","tq","TieredDatastore","stores","pushables","batches","iterable","sorter","pathSepS","pathSepB","pathSep","clean","_buf","uint8ArrayFromString","uint8Array","toStringTag","nanoid","subarray","less","list1","list2","c1","c2","withNamespaces","namespaces","baseNamespace","ns","namespaceType","namespaceValue","endsWith","isDecendantOf","isTopLevel","WantlistEntry","Wantlist","BitswapMessageEntry","priority","wantType","cancel","sendDontHave","IPFS_PREFIX","toCidAndPath","empty","toHex","byte","fromHex","hexes","aa","bb","ii","isBinary","fromString"],"sourceRoot":""}