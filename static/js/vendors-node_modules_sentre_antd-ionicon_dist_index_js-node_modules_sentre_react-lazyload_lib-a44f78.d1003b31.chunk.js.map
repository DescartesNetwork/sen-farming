{"version":3,"file":"static/js/vendors-node_modules_sentre_antd-ionicon_dist_index_js-node_modules_sentre_react-lazyload_lib-a44f78.d1003b31.chunk.js","mappings":"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","sources":["../../src/index.tsx","../node_modules/@sentre/react-lazyload/lib/index.js","../node_modules/@sentre/react-lazyload/lib/utils/debounce.js","../node_modules/@sentre/react-lazyload/lib/utils/event.js","../node_modules/@sentre/react-lazyload/lib/utils/scrollParent.js","../node_modules/@sentre/react-lazyload/lib/utils/throttle.js","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/util/bigint.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js"],"sourcesContent":[null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forceVisible = exports.forceCheck = exports.lazyload = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _event = require('./utils/event');\n\nvar _scrollParent = require('./utils/scrollParent');\n\nvar _scrollParent2 = _interopRequireDefault(_scrollParent);\n\nvar _debounce = require('./utils/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _throttle = require('./utils/throttle');\n\nvar _throttle2 = _interopRequireDefault(_throttle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * react-lazyload\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar defaultBoundingClientRect = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  width: 0,\n  height: 0\n};\nvar LISTEN_FLAG = 'data-lazyload-listened';\nvar listeners = [];\nvar pending = [];\n\n// try to handle passive events\nvar passiveEventSupported = false;\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      passiveEventSupported = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {}\n// if they are supported, setup the optional params\n// IMPORTANT: FALSE doubles as the default CAPTURE value!\nvar passiveEvent = passiveEventSupported ? { capture: false, passive: true } : false;\n\n/**\n * Check if `component` is visible in overflow container `parent`\n * @param  {node} component React component\n * @param  {node} parent    component's scroll parent\n * @return {bool}\n */\nvar checkOverflowVisible = function checkOverflowVisible(component, parent) {\n  var node = component.ref;\n\n  var parentTop = void 0;\n  var parentLeft = void 0;\n  var parentHeight = void 0;\n  var parentWidth = void 0;\n\n  try {\n    ;\n    var _parent$getBoundingCl = parent.getBoundingClientRect();\n\n    parentTop = _parent$getBoundingCl.top;\n    parentLeft = _parent$getBoundingCl.left;\n    parentHeight = _parent$getBoundingCl.height;\n    parentWidth = _parent$getBoundingCl.width;\n  } catch (e) {\n    ;parentTop = defaultBoundingClientRect.top;\n    parentLeft = defaultBoundingClientRect.left;\n    parentHeight = defaultBoundingClientRect.height;\n    parentWidth = defaultBoundingClientRect.width;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n  var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;\n\n  // calculate top and height of the intersection of the element's scrollParent and viewport\n  var intersectionTop = Math.max(parentTop, 0); // intersection's top relative to viewport\n  var intersectionLeft = Math.max(parentLeft, 0); // intersection's left relative to viewport\n  var intersectionHeight = Math.min(windowInnerHeight, parentTop + parentHeight) - intersectionTop; // height\n  var intersectionWidth = Math.min(windowInnerWidth, parentLeft + parentWidth) - intersectionLeft; // width\n\n  // check whether the element is visible in the intersection\n  var top = void 0;\n  var left = void 0;\n  var height = void 0;\n  var width = void 0;\n\n  try {\n    ;\n    var _node$getBoundingClie = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie.top;\n    left = _node$getBoundingClie.left;\n    height = _node$getBoundingClie.height;\n    width = _node$getBoundingClie.width;\n  } catch (e) {\n    ;top = defaultBoundingClientRect.top;\n    left = defaultBoundingClientRect.left;\n    height = defaultBoundingClientRect.height;\n    width = defaultBoundingClientRect.width;\n  }\n\n  var offsetTop = top - intersectionTop; // element's top relative to intersection\n  var offsetLeft = left - intersectionLeft; // element's left relative to intersection\n\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return offsetTop - offsets[0] <= intersectionHeight && offsetTop + height + offsets[1] >= 0 && offsetLeft - offsets[0] <= intersectionWidth && offsetLeft + width + offsets[1] >= 0;\n};\n\n/**\n * Check if `component` is visible in document\n * @param  {node} component React component\n * @return {bool}\n */\nvar checkNormalVisible = function checkNormalVisible(component) {\n  var node = component.ref;\n\n  // If this element is hidden by css rules somehow, it's definitely invisible\n  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;\n\n  var top = void 0;\n  var elementHeight = void 0;\n\n  try {\n    ;\n    var _node$getBoundingClie2 = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie2.top;\n    elementHeight = _node$getBoundingClie2.height;\n  } catch (e) {\n    ;top = defaultBoundingClientRect.top;\n    elementHeight = defaultBoundingClientRect.height;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return top - offsets[0] <= windowInnerHeight && top + elementHeight + offsets[1] >= 0;\n};\n\n/**\n * Detect if element is visible in viewport, if so, set `visible` state to true.\n * If `once` prop is provided true, remove component as listener after checkVisible\n *\n * @param  {React} component   React component that respond to scroll and resize\n */\nvar checkVisible = function checkVisible(component) {\n  var node = component.ref;\n  if (!(node instanceof HTMLElement)) {\n    return;\n  }\n\n  var parent = (0, _scrollParent2.default)(node);\n  var isOverflow = component.props.overflow && parent !== node.ownerDocument && parent !== document && parent !== document.documentElement;\n  var visible = isOverflow ? checkOverflowVisible(component, parent) : checkNormalVisible(component);\n  if (visible) {\n    // Avoid extra render if previously is visible\n    if (!component.visible) {\n      if (component.props.once) {\n        pending.push(component);\n      }\n\n      component.visible = true;\n      component.forceUpdate();\n    }\n  } else if (!(component.props.once && component.visible)) {\n    component.visible = false;\n    if (component.props.unmountIfInvisible) {\n      component.forceUpdate();\n    }\n  }\n};\n\nvar purgePending = function purgePending() {\n  pending.forEach(function (component) {\n    var index = listeners.indexOf(component);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  });\n\n  pending = [];\n};\n\nvar lazyLoadHandler = function lazyLoadHandler() {\n  for (var i = 0; i < listeners.length; ++i) {\n    var listener = listeners[i];\n    checkVisible(listener);\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n\n/**\n * Forces the component to display regardless of whether the element is visible in the viewport.\n */\nvar forceVisible = function forceVisible() {\n  for (var i = 0; i < listeners.length; ++i) {\n    var listener = listeners[i];\n    listener.visible = true;\n    listener.forceUpdate();\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n\n// Depending on component's props\nvar delayType = void 0;\nvar finalLazyLoadHandler = null;\n\nvar isString = function isString(string) {\n  return typeof string === 'string';\n};\n\nvar LazyLoad = function (_Component) {\n  _inherits(LazyLoad, _Component);\n\n  function LazyLoad(props) {\n    _classCallCheck(this, LazyLoad);\n\n    var _this = _possibleConstructorReturn(this, (LazyLoad.__proto__ || Object.getPrototypeOf(LazyLoad)).call(this, props));\n\n    _this.visible = false;\n    _this.setRef = _this.setRef.bind(_this);\n    return _this;\n  }\n\n  _createClass(LazyLoad, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // It's unlikely to change delay type on the fly, this is mainly\n      // designed for tests\n      var scrollport = window;\n      var scrollContainer = this.props.scrollContainer;\n\n      if (scrollContainer) {\n        if (isString(scrollContainer)) {\n          scrollport = scrollport.document.querySelector(scrollContainer);\n        }\n      }\n      var needResetFinalLazyLoadHandler = this.props.debounce !== undefined && delayType === 'throttle' || delayType === 'debounce' && this.props.debounce === undefined;\n\n      if (needResetFinalLazyLoadHandler) {\n        (0, _event.off)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);\n        (0, _event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        finalLazyLoadHandler = null;\n      }\n\n      if (!finalLazyLoadHandler) {\n        if (this.props.debounce !== undefined) {\n          finalLazyLoadHandler = (0, _debounce2.default)(lazyLoadHandler, typeof this.props.debounce === 'number' ? this.props.debounce : 300);\n          delayType = 'debounce';\n        } else if (this.props.throttle !== undefined) {\n          finalLazyLoadHandler = (0, _throttle2.default)(lazyLoadHandler, typeof this.props.throttle === 'number' ? this.props.throttle : 300);\n          delayType = 'throttle';\n        } else {\n          finalLazyLoadHandler = lazyLoadHandler;\n        }\n      }\n\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(this.ref);\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = 1 + +parent.getAttribute(LISTEN_FLAG);\n          if (listenerCount === 1) {\n            parent.addEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n          }\n          parent.setAttribute(LISTEN_FLAG, listenerCount);\n        }\n      } else if (listeners.length === 0 || needResetFinalLazyLoadHandler) {\n        var _props = this.props,\n            scroll = _props.scroll,\n            resize = _props.resize;\n\n\n        if (scroll) {\n          (0, _event.on)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);\n        }\n\n        if (resize) {\n          (0, _event.on)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        }\n      }\n\n      listeners.push(this);\n      checkVisible(this);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return this.visible;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(this.ref);\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = +parent.getAttribute(LISTEN_FLAG) - 1;\n          if (listenerCount === 0) {\n            parent.removeEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n            parent.removeAttribute(LISTEN_FLAG);\n          } else {\n            parent.setAttribute(LISTEN_FLAG, listenerCount);\n          }\n        }\n      }\n\n      var index = listeners.indexOf(this);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n\n      if (listeners.length === 0 && typeof window !== 'undefined') {\n        (0, _event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);\n        (0, _event.off)(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      }\n    }\n  }, {\n    key: 'setRef',\n    value: function setRef(element) {\n      if (element) {\n        this.ref = element;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          height = _props2.height,\n          children = _props2.children,\n          placeholder = _props2.placeholder,\n          className = _props2.className,\n          classNamePrefix = _props2.classNamePrefix,\n          style = _props2.style;\n\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: classNamePrefix + '-wrapper ' + className,\n          ref: this.setRef,\n          style: style\n        },\n        this.visible ? children : placeholder ? placeholder : _react2.default.createElement('div', {\n          style: { height: height },\n          className: classNamePrefix + '-placeholder'\n        })\n      );\n    }\n  }]);\n\n  return LazyLoad;\n}(_react.Component);\n\nLazyLoad.propTypes = {\n  className: _propTypes2.default.string,\n  classNamePrefix: _propTypes2.default.string,\n  once: _propTypes2.default.bool,\n  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),\n  overflow: _propTypes2.default.bool,\n  resize: _propTypes2.default.bool,\n  scroll: _propTypes2.default.bool,\n  children: _propTypes2.default.node,\n  throttle: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),\n  debounce: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),\n  placeholder: _propTypes2.default.node,\n  scrollContainer: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  unmountIfInvisible: _propTypes2.default.bool,\n  style: _propTypes2.default.object\n};\n\nLazyLoad.defaultProps = {\n  className: '',\n  classNamePrefix: 'lazyload',\n  once: false,\n  offset: 0,\n  overflow: false,\n  resize: false,\n  scroll: true,\n  unmountIfInvisible: false\n};\n\nvar getDisplayName = function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n};\n\nvar decorator = function decorator() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function lazyload(WrappedComponent) {\n    return function (_Component2) {\n      _inherits(LazyLoadDecorated, _Component2);\n\n      function LazyLoadDecorated() {\n        _classCallCheck(this, LazyLoadDecorated);\n\n        var _this2 = _possibleConstructorReturn(this, (LazyLoadDecorated.__proto__ || Object.getPrototypeOf(LazyLoadDecorated)).call(this));\n\n        _this2.displayName = 'LazyLoad' + getDisplayName(WrappedComponent);\n        return _this2;\n      }\n\n      _createClass(LazyLoadDecorated, [{\n        key: 'render',\n        value: function render() {\n          return _react2.default.createElement(\n            LazyLoad,\n            options,\n            _react2.default.createElement(WrappedComponent, this.props)\n          );\n        }\n      }]);\n\n      return LazyLoadDecorated;\n    }(_react.Component);\n  };\n};\n\nexports.lazyload = decorator;\nexports.default = LazyLoad;\nexports.forceCheck = lazyLoadHandler;\nexports.forceVisible = forceVisible;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = debounce;\nfunction debounce(func, wait, immediate) {\n  var timeout = void 0;\n  var args = void 0;\n  var context = void 0;\n  var timestamp = void 0;\n  var result = void 0;\n\n  var later = function later() {\n    var last = +new Date() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) {\n          context = null;\n          args = null;\n        }\n      }\n    }\n  };\n\n  return function debounced() {\n    context = this;\n    args = arguments;\n    timestamp = +new Date();\n\n    var callNow = immediate && !timeout;\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = null;\n      args = null;\n    }\n\n    return result;\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.on = on;\nexports.off = off;\nfunction on(el, eventName, callback, opts) {\n  opts = opts || false;\n  if (el.addEventListener) {\n    el.addEventListener(eventName, callback, opts);\n  } else if (el.attachEvent) {\n    el.attachEvent(\"on\" + eventName, function (e) {\n      callback.call(el, e || window.event);\n    });\n  }\n}\n\nfunction off(el, eventName, callback, opts) {\n  opts = opts || false;\n  if (el.removeEventListener) {\n    el.removeEventListener(eventName, callback, opts);\n  } else if (el.detachEvent) {\n    el.detachEvent(\"on\" + eventName, callback);\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * @fileOverview Find scroll parent\n */\n\nexports.default = function (node) {\n  if (!(node instanceof HTMLElement)) {\n    return document.documentElement;\n  }\n\n  var excludeStaticParent = node.style.position === 'absolute';\n  var overflowRegex = /(scroll|auto|overlay)/;\n  var parent = node;\n\n  while (parent) {\n    if (!parent.parentNode) {\n      return node.ownerDocument || document.documentElement;\n    }\n\n    var style = window.getComputedStyle(parent);\n    var position = style.position;\n    var overflow = style.overflow;\n    var overflowX = style['overflow-x'];\n    var overflowY = style['overflow-y'];\n\n    if (position === 'static' && excludeStaticParent) {\n      parent = parent.parentNode;\n      continue;\n    }\n\n    if (overflowRegex.test(overflow) && overflowRegex.test(overflowX) && overflowRegex.test(overflowY)) {\n      return parent;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return node.ownerDocument || node.documentElement || document.documentElement;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = throttle;\n/*eslint-disable */\nfunction throttle(fn, threshhold, scope) {\n  threshhold || (threshhold = 250);\n  var last, deferTimer;\n  return function () {\n    var context = scope || this;\n\n    var now = +new Date(),\n        args = arguments;\n    if (last && now < last + threshhold) {\n      // hold on to it\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"],"names":["forwardRef","_a","ref","className","props","cln","_jsxs","Fragment","children","_jsx","Helmet","type","src","CUSTOM_ICONS","name","exports","undefined","_createClass","defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_react","require","_react2","_interopRequireDefault","_propTypes2","_event","_scrollParent2","_debounce2","_throttle2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","defaultBoundingClientRect","LISTEN_FLAG","listeners","pending","passiveEventSupported","opts","get","window","addEventListener","e","passiveEvent","capture","passive","checkVisible","component","node","HTMLElement","parent","visible","overflow","ownerDocument","document","documentElement","parentTop","parentLeft","parentHeight","parentWidth","_parent$getBoundingCl","getBoundingClientRect","top","left","height","width","windowInnerHeight","innerHeight","clientHeight","windowInnerWidth","innerWidth","clientWidth","intersectionTop","Math","max","intersectionLeft","intersectionHeight","min","intersectionWidth","_node$getBoundingClie","offsetTop","offsetLeft","offsets","Array","isArray","offset","checkOverflowVisible","offsetWidth","offsetHeight","getClientRects","elementHeight","_node$getBoundingClie2","checkNormalVisible","once","push","forceUpdate","unmountIfInvisible","purgePending","forEach","index","indexOf","splice","lazyLoadHandler","listener","delayType","finalLazyLoadHandler","LazyLoad","_Component","this","_this","getPrototypeOf","setRef","bind","scrollport","scrollContainer","querySelector","needResetFinalLazyLoadHandler","debounce","off","throttle","getAttribute","listenerCount","setAttribute","_props","scroll","resize","on","removeEventListener","removeAttribute","element","_props2","placeholder","classNamePrefix","style","createElement","Component","propTypes","string","bool","oneOfType","number","arrayOf","object","defaultProps","getDisplayName","WrappedComponent","displayName","func","wait","immediate","timeout","args","context","timestamp","result","later","last","Date","setTimeout","apply","arguments","callNow","el","eventName","callback","attachEvent","event","detachEvent","excludeStaticParent","position","overflowRegex","parentNode","getComputedStyle","overflowX","overflowY","test","fn","threshhold","scope","deferTimer","now","clearTimeout","toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","inherits_browserModule","ctor","superCtor","super_","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","charCodeAt","htonl","w","zero2","word","zero8","utils","enc","slice","res","replace","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","num","BlockHash","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","_log","logLevel","level","toLowerCase","throwArgumentError","console","log","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","isInteger","arrayify","options","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","decode","_encode","rslShim","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","pubkey","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","encodeData","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","globalThis","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","root","SlotNotificationResult","SlotUpdateResult","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","RpcClient","request","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","response","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","checkBlockHeight","getBlockHeight","_e","expiryPromise","timeoutMs","TIMED_OUT","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","module","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","zeroes","precision","_result$split2","split","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","input","normalizeInput","unformat","isNaN","NaN","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid"],"sourceRoot":""}