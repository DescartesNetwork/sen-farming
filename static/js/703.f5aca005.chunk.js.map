{"version":3,"file":"static/js/703.f5aca005.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","os/providers/mint.provider.tsx","shared/runtime.ts","shared/util.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { UIState } from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const { ui } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ ui }), [ui])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from './tokenProvider'\nimport { account } from '@senswap/sen-js'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...agrs: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...agrs: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...agrs)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Open newtab\n * @param href - string\n * @returns\n */\nexport const openNewTab = (href: string) => {\n  return window.open(href, '_blank')\n}\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["Context","createContext","children","appId","style","antd","ui","useRootSelector","state","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","sol","chainId","symbol","name","address","decimals","extensions","coingeckoId","logoURI","sntr","configs","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","index","field","constructor","tokenMap","engine","cluster","loading","queue","_init","async","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","forEach","token","set","Document","doc","add","length","shift","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","split","key","search","result","findIndex","Map","net","tokenProvider","TokenProvider","dispatch","useRootDispatch","mints","getMint","useCallback","agrs","_getMint","unwrap","getDecimals","account","mintAddress","Error","tokenInfo","Object","mint_lpt","mintData","MintContextComsumer","withMint","useMint","env","storage","getNetwork","onSwitchNetwork","window","location","reload","openNewTab","href","open","asyncWait","ms","setTimeout","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","ticket","DataLoader","utils"],"sourceRoot":""}